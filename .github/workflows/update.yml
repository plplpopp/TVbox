name: TV直播源自动更新

on:
  # 定时触发：每天5点、12点、17点（UTC时间，对应北京时间13点、20点、次日1点）
  schedule:
    - cron: '0 5,12,17 * * *'
  
  # 手动触发
  workflow_dispatch:
    inputs:
      force_update:
        description: '强制更新（忽略缓存）'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'
      skip_speed_test:
        description: '跳过测速（加快更新速度）'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

# 设置工作流权限
permissions:
  contents: write

jobs:
  update-sources:
    name: 更新直播源
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
        
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 创建配置文件目录
      run: |
        mkdir -p config output logs
        
    - name: 准备配置文件
      run: |
        # 如果配置文件不存在，创建默认配置
        if [ ! -f config/config.ini ]; then
          echo "创建默认配置文件..."
          cat > config/config.ini << 'EOF'
[Settings]
; 功能开关配置
open_driver = False
open_epg = False
open_empty_category = False
open_filter_resolution = True
open_filter_speed = True
open_hotel = False
open_hotel_foodie = True
open_hotel_fofa = False
open_local = True
open_m3u_result = True
open_multicast = False
open_multicast_foodie = True
open_multicast_fofa = False
open_request = False
open_rtmp = True
open_service = True
open_speed_test = ${{ inputs.skip_speed_test == 'true' && 'False' || 'True' }}
open_subscribe = True
open_supply = True
open_update = True
open_update_time = True
open_url_info = False
open_use_cache = ${{ inputs.force_update == 'true' && 'False' || 'True' }}
open_history = True
open_headers = False
speed_test_filter_host = False
ipv6_support = False

; 网络服务配置
app_host = http://localhost
app_port = 8000
cdn_url = 

; 文件路径配置
final_file = output/result.txt
local_file = config/local.txt
source_file = config/demo.txt

; 数量限制配置
hotel_num = 10
hotel_page_num = 1
multicast_num = 10
multicast_page_num = 1
local_num = 15
subscribe_num = 15
urls_limit = 8

; 地区设置配置
hotel_region_list = 全部
multicast_region_list = 全部

; 网络优化配置
isp = 
ipv4_num = 
ipv6_num = 
ipv_type = 全部
ipv_type_prefer = auto
location = 

; 质量设置配置
min_resolution = 1920x1080
max_resolution = 1920x1080
min_speed = 0.5

; 时间设置配置
recent_days = 30
request_timeout = 15
speed_test_limit = 8
speed_test_timeout = 10
time_zone = Asia/Shanghai
update_interval = 12
update_time_position = top
EOF
        fi
        
        # 创建本地源文件（如果不存在）
        if [ ! -f config/local.txt ]; then
          echo "创建本地源文件..."
          cat > config/local.txt << 'EOF'
# 本地源频道列表
# 格式: 频道名称,频道URL
# 自动更新时会保留此文件中的源
EOF
        fi
        
        # 创建订阅文件（如果不存在）
        if [ ! -f config/subscribe.txt ]; then
          echo "创建订阅文件..."
          cat > config/subscribe.txt << 'EOF'
# 订阅源URL列表
# 每行一个订阅URL，支持M3U格式和文本格式

# 示例订阅源（实际使用时请替换为真实的订阅源）
# https://example.com/playlist.m3u8
EOF
        fi
        
        # 创建模板文件（如果不存在）
        if [ ! -f config/demo.txt ]; then
          echo "创建模板文件..."
          cat > config/demo.txt << 'EOF'
# 模板源文件
# 用于定义频道结构和默认源

CCTV-1,
CCTV-2,
CCTV-5,
湖南卫视,
浙江卫视,
江苏卫视,
北京卫视,
东方卫视,
EOF
        fi
        
    - name: 运行直播源更新
      id: update
      run: |
        echo "开始更新直播源..."
        echo "当前时间: $(date)"
        echo "工作目录: $(pwd)"
        
        # 运行更新程序
        python main.py
        
        # 检查结果文件
        if [ -f output/result.txt ]; then
          SOURCE_COUNT=$(grep -c "," output/result.txt || true)
          echo "更新完成，找到 $SOURCE_COUNT 个有效源"
          echo "source_count=$SOURCE_COUNT" >> $GITHUB_OUTPUT
        else
          echo "错误：结果文件未生成"
          echo "source_count=0" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: 显示更新结果
      run: |
        echo "=== 更新结果统计 ==="
        if [ -f output/result.txt ]; then
          echo "结果文件大小: $(wc -c < output/result.txt) 字节"
          echo "有效源数量: ${{ steps.update.outputs.source_count }}"
          echo "前10个频道:"
          head -20 output/result.txt | grep -v "^#"
        else
          echo "错误：结果文件不存在"
        fi
        
    - name: 提交更新结果
      if: steps.update.outputs.source_count > 0
      run: |
        # 配置Git用户信息
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 添加更改的文件
        git add output/result.txt
        git add logs/update.log || true
        
        # 检查是否有更改
        if git diff --staged --quiet; then
          echo "没有新的更改需要提交"
        else
          # 提交更改
          git commit -m "🤖 自动更新直播源 - ${{ steps.update.outputs.source_count }}个有效源 [$(date +'%Y-%m-%d %H:%M')]"
          
          # 推送到仓库
          git push
          echo "更新结果已提交到仓库"
        fi
        
    - name: 上传结果文件作为制品
      uses: actions/upload-artifact@v4
      with:
        name: tv-sources-result
        path: |
          output/result.txt
          logs/update.log
        retention-days: 7
        
    - name: 发送成功通知
      if: success() && steps.update.outputs.source_count > 0
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |-
          🎉 TV直播源自动更新成功！
          - 有效源数量: ${{ steps.update.outputs.source_count }}
          - 更新时间: $(date -u +"%Y-%m-%d %H:%M UTC")
        channel: '#notifications'  # 可选：指定Slack频道
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true  # Slack通知失败不影响工作流
        
    - name: 发送失败通知
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |-
          ❌ TV直播源自动更新失败！
          - 请检查工作流运行日志
          - 失败时间: $(date -u +"%Y-%m-%d %H:%M UTC")
        channel: '#notifications'  # 可选：指定Slack频道
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true
